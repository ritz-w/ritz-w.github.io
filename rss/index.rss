<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>B L O G </title><description>Thoughts, stories and ideas about web development, by Ritz.</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>B L O G </title><link>http://localhost:2368/</link></image><generator>Ghost 1.24</generator><lastBuildDate>Tue, 04 Sep 2018 15:04:27 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Using Javascript with Ruby</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;During our last project, in which we created an application that tracked the distances for takeaway shops in a certain radius to a user's location, a key part of the interface was embedded maps.&lt;/p&gt;&lt;p&gt;We embedded maps for the user's location, for the location of each takeaway, and even for&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/using-javascript-with-ruby/</link><guid isPermaLink="false">5b8e5eb38665e40978ca5179</guid><dc:creator>Ritz Wu</dc:creator><pubDate>Tue, 04 Sep 2018 10:32:59 GMT</pubDate><content:encoded>&lt;div class="kg-post"&gt;
&lt;p&gt;During our last project, in which we created an application that tracked the distances for takeaway shops in a certain radius to a user's location, a key part of the interface was embedded maps.&lt;/p&gt;&lt;p&gt;We embedded maps for the user's location, for the location of each takeaway, and even for where certain dishes in our database came from. As such, a key part of our project was learning to use the Google Maps API, which was written in Javascript.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/09/gmap.gif" class="kg-image"&gt;&lt;/figure&gt;&lt;h1 id="anatomy-of-a-map"&gt;Anatomy of a Map&lt;/h1&gt;&lt;p&gt;This is the structure of the code block that contains our map. It is written into a view file, wrapped in HTML. First, we need to define the area where we intend to put our map. The Javascript code follows afterward, in &amp;lt;script&amp;gt; tags. However, it doesn't have to go here. I put it here for clarity, but in fact it would perhaps be best placed at the bottom of the &amp;lt;body&amp;gt; tag. There are two separate Javascript tags here. The first one creates the map element. The second one calls the API - or links the files/resources needed to create the map, as well as providing our authentication details. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;div class="col-md-6"&amp;gt;
    
&amp;lt;!--Below is the div element containing the map. We have tagged it with an id of "map-container", which is what we are going to use later to let the mapknow where it should go. --&amp;gt;
    
 &amp;lt;div class="container" id="map-container"&amp;gt;
 &amp;lt;/div&amp;gt;
 
&amp;lt;!-- And here, we inject our script tag with the Javascript inside. Now, knowing more about Javascript we know that this should perhaps go at the bottom of the &amp;lt;body&amp;gt; --&amp;gt;

&amp;lt;script&amp;gt;
    //Insert content here from the next code block...   
&amp;lt;/script&amp;gt;
       
    
&amp;lt;!-- Under the first Javascript tag, here we call the google maps API, which contains our key. For security purposes we have hidden it. --&amp;gt; 
  &amp;lt;script async defer
  src="https://maps.googleapis.com/maps/api/js?key=..............................&amp;amp;callback=initMap"&amp;gt;
  &amp;lt;/script&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;You'll find the second script also has an 'async defer' in its tag. What does this mean? Well unlike our first script tag, it specifies that the script is executed when the page has finished parsing. The &lt;strong&gt;defer&lt;/strong&gt; attribute is only for external scripts (should only be used if the src attribute is present).  When an external script has this attribute, the file can be downloaded while the HTML document is still parsing. Once it has been downloaded, the parsing is paused for the script to be executed.&lt;/p&gt;&lt;p&gt;That means that the call to the API (you'll see in the URL where we specify we want the init function) will be downloading while our page is loading, and finally when our page is loaded it will fire the call. This makes the loading of the page efficient, and makes sure that all of the elements on the page will be rendered before we try to make changes to any of them.&lt;/p&gt;&lt;h1 id="mix-and-match"&gt;Mix and Match&lt;/h1&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/09/mo.gif" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;OK, what about this initMap function?&lt;/p&gt;&lt;p&gt;Here is the code that was inserted inside our first &amp;lt;script&amp;gt; tag above.&lt;/p&gt;&lt;p&gt;In the absence of wanting to create a whole other Javascript file to deal with our maps, and given the occasional need to use the information from Ruby variables within our maps (specifically, the latitude and longitude variables that were stored within our database) we often ended up mixing Ruby and Javascript, and seeing how far we could push that kind of behaviour.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;function initMap() {
// We define a variable 'place', which is a hash containing the coordinates of the location of the marker we want to put on the map. As you can see these are provided by Ruby variables. Using the familiar Ruby tag, we are able to insert those values into our Javascript variable.

var place = {lat: &amp;lt;%= @restaurant.get_coordinates[0] %&amp;gt; , lng: &amp;lt;%= @restaurant.get_coordinates[1] %&amp;gt;};
    

//We create a new map, which calls from the Google Maps API, and plug it the div element we defined above.
    
var map = new google.maps.Map(document.getElementById('map-container'), {zoom: 12, center: place});
    
    
//We create the actual marker, and put it at the position of the place variable we defined earlier.

var marker = new google.maps.Marker({position: place, map: map}); 
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This surprisingly worked. What about this?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    //Here, I used Ruby to create an array of restaurant coordinates and restaurant information (name, ID, and address) that I'm later gonna stick into an InfoWindow (a Google Maps feature that will pop up a little info box when I click on the marker).
    
    var locations = &amp;lt;%= raw @restaurants.map {|restaurant| [restaurant.name, restaurant.getcoordinates[0], restaurant.getcoordinates[1], restaurant.id, restaurant.address]} %&amp;gt;;
    
   //Initializing the map....

    function initMap() {
    
    
    //Creating new map (var map) ...
        
        var map = new google.maps.Map(document.getElementById('all-restaurants-map-container'), {
            zoom: 12,
            center: new google.maps.LatLng(51.5138, -0.15),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });
    
    //Creating the new InfoWindow and Marker...

        var infowindow = new google.maps.InfoWindow()
        var marker, i;
        
       //And I iterate through my locations variable to produce a new marker and info window for every entry. 

        for (i = 0; i &amp;lt; locations.length; i++) {
            marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map
            });

            google.maps.event.addListener(marker, 'click', (function (marker, i) {
            
            
            //Here I interpolate HTML into Javascript to be able to insert the information from my array into the Window. And you will notice that I use the ${} tag, to call Javascript variables within the HTML. That's a lot of mixing and matching.
            
            
                return function () {
                  var contentString = '&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;'+
                  '&amp;lt;div id=&amp;quot;siteNotice&amp;quot;&amp;gt;'+
                  '&amp;lt;/div&amp;gt;'+
                  '&amp;lt;h5 id=&amp;quot;firstHeading&amp;quot; class=&amp;quot;firstHeading&amp;quot;&amp;gt;'+locations[i][0]+'&amp;lt;/h5&amp;gt;'+
                  '&amp;lt;div id=&amp;quot;bodyContent&amp;quot;&amp;gt;'+
                  `&amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;/restaurants/${locations[i][3]}&amp;quot;&amp;gt;
                  ${locations[i][4]}&amp;lt;/a&amp;gt;`+
                  '&amp;lt;/div&amp;gt;'+
                  '&amp;lt;/div&amp;gt;';
                    infowindow.setContent(contentString);
                    infowindow.open(map, marker);
                }
            })(marker, i));
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="is-this-best-practice"&gt;Is this best practice?&lt;/h1&gt;&lt;p&gt;To be honest with you, no. While it's a quick fix for a project like this one, and probably was a lot more common before, according to seasoned Ruby/JS developers, it's on it's way out.&lt;/p&gt;&lt;p&gt;The main problem here is that it couples your JS too tightly to your view HTML, which causes a &lt;a href="https://stackoverflow.com/questions/7221923/is-it-correct-to-have-files-that-mix-javascript-and-ruby-ie-js-erb"&gt;lack of flexibility and too much complexity&lt;/a&gt;.  This is not code that can be recycled. Also, any changes or updates that you make would have to go through the HTML. &lt;/p&gt;&lt;p&gt;However, in this particular project, it does allow us a degree of flexibility in being able to access variables that may be constantly updated to populate a few maps. For a larger project this wouldn't be a good idea, but it fit ours.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Spreadsheet vs. Database Mapping</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;Recently, for our module 1 project, we created a database which provided different personality type analyses based on the Myers-Briggs Type Indicator. This test essentially sorts people into 16 personality types formed of 4 letters. Since each letter is encoded with a certain meaning according to the MBTI indicator, we&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/spreadsheet-vs-database-mapping/</link><guid isPermaLink="false">5b72a01961712e0853fcf6bf</guid><dc:creator>Ritz Wu</dc:creator><pubDate>Tue, 14 Aug 2018 09:34:44 GMT</pubDate><content:encoded>&lt;div class="kg-post"&gt;
&lt;p&gt;Recently, for our module 1 project, we created a database which provided different personality type analyses based on the Myers-Briggs Type Indicator. This test essentially sorts people into 16 personality types formed of 4 letters. Since each letter is encoded with a certain meaning according to the MBTI indicator, we thought it would be interesting to be able to return different data based on different combinations within the 4 letter personality type set. &lt;/p&gt;&lt;p&gt;For example, for type INFJ (Introverted iNtuitive Feeling Judging): &lt;/p&gt;&lt;p&gt;1) You could generate an analysis based on each letter.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/MBTI-Dimensions.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;2) You could generate a certain analysis based on the combination N+F.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/functionpairs.jpg" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;3) This type itself comes with an ordered set of 4  'cognitive functions', and it could return an analysis based on each.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/cogfunc.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;In terms of data, this meant we already had 3 tables we needed to create to pull information from for each type.&lt;/p&gt;&lt;p&gt;The headers were simple to figure out for these.&lt;/p&gt;&lt;p&gt;1) Columns: (1) Letter, (2) Description of Each Letter&lt;br&gt;	Row: 16 rows, one for each letter&lt;br&gt;2) Columns: (1) Combination, (2) Description of Each Combination&lt;br&gt;	Row: 8 rows, one for each combination&lt;br&gt;3) Columns: (1) Type, (2) Dominant Function Description, (3) Auxiliary Function Description, (4) Tertiary Function Description, (5) Inferior Function Description&lt;br&gt;	Row: 16 rows, one for each personality type&lt;/p&gt;&lt;p&gt;And the process of pulling the data from these tables was also simple - to break the 4 letters apart, match them to the first column of every table,  select the relevant information from one of the columns to its right, and to return it.&lt;/p&gt;&lt;p&gt;However, the big challenge in this project was mapping out what type-to-type compatibility would look like in a database. What happens when you have a complex data set that looks like this? How do you make it easy for the computer to read?&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/compatchart.jpg" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;Ideas I had were: &lt;br&gt;	1) A 16 x 16 chart, with the compatibility score as the entry? &lt;br&gt;	&lt;em&gt;	But how would I access the corresponding type if it was the 		name of the column?&lt;/em&gt;&lt;br&gt;	2) Group types into little arrays based on the chart legend - i.e. 		5 arrays, one that could go in each column.&lt;br&gt;		&lt;em&gt;Although arrays aren't allowed in data tables.&lt;/em&gt;&lt;br&gt;	3) Simply everything into three categories of 'very, potentially, 		and least" compatible and have the entries for each row look 		like long strings that I'd eventually break into arrays.&lt;br&gt;&lt;em&gt;		But to do a lookup through string manipulation would 			cause methods to get really complicated and perhaps 			break in certain instances.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Given issues to do with column lookup functions, and the information that I needed (both the type, and the compatibility score), what I ended up doing, was a combination of all 3. &lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/Screen-Shot-2018-08-14-at-12.58.35.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;I ended up making a 16 x 16 table, where each cell had both a corresponding type and compatibility score. That way I could both access the type name and score, using string manipulation. As every cell reliably only had these two parts of information, it would be consistent across the table.&lt;/p&gt;&lt;p&gt;This part took me two hours of sifting through compatibility charts and formats, trying to visualise how the computer would carry out the necessary operations on the data, and figuring out what would not eventually cause my methods to have to be too complex.&lt;/p&gt;&lt;hr&gt;&lt;h1 id="database-thinking-vs-spreadsheet-thinking"&gt;Database Thinking vs. Spreadsheet Thinking&lt;/h1&gt;&lt;p&gt;Thinking about the challenges involved in structuring a database, I decided to look into this practice within computer science. After all, with large-scale projects, I can only imagine what a pain it would be to set up a database structure that couldn't evolve or grow with added functionality. &lt;/p&gt;&lt;blockquote&gt;It is often said that 80% of data analysis is spent on the process of cleaning and preparing the data (Dasu and Johnson 2003). Data preparation is not just a first step, but must be repeated many over the course of analysis as new problems come to light or new data is collected.&lt;br&gt;&lt;br&gt;Tidy Data, Hadley Wickham, Journal of Statistical Software&lt;/blockquote&gt;&lt;p&gt;There is a common principle about the shape of datasets - that while spreadsheets for human use are often short and wide... i.e. many columns and few rows, to avoid repetition, those most easily read by the computer are long and narrow - few columns with many rows.&lt;/p&gt;&lt;p&gt;Consider this data set represented in two ways:&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/spreadsheet.jpeg" class="kg-image"&gt;&lt;figcaption&gt;As you can see, there is very little repetition in this table. But in order to capture this data through code, you would come across the problem of variables being stored in column names, that a computer would have a relatively hard time with.&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/database.jpeg" class="kg-image"&gt;&lt;figcaption&gt;Meanwhile, although this structure causes a lot of repetition, it becomes a lot easier to search through for a computer, as well as for it to perform mathematical functions on the data. One could also imagine it being much easier to add new columns that provide different information/calculations of the data.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 id="some-tips-tidy-data"&gt;Some Tips - Tidy Data&lt;/h1&gt;&lt;p&gt;Apparently, there is a whole framework of tips and practices surrounding database architecture, that for those of us looking to get deeper in the back-end might find helpful.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tidy data&lt;/strong&gt; has the following principles:&lt;/p&gt;&lt;p&gt;1) Each variable forms a column.&lt;br&gt;2) Each observation forms a row.&lt;br&gt;3) Each type of observational unit forms a table.&lt;/p&gt;&lt;p&gt;The 5 most common problems with messy datasets are the following:&lt;/p&gt;&lt;p&gt;1) Column headers are values, not variable names.&lt;br&gt;2)  Multiple variables are stored in one column. &lt;br&gt;3) Variables are stored in both rows and columns. &lt;br&gt;4) Multiple types of observational units are stored in the same table. &lt;br&gt;5) A single observational unit is stored in multiple tables.&lt;/p&gt;&lt;p&gt;Analysing my own resolution to the problem above, regarding compatibility charts - I see that as much as possible I avoided storing variable names in column headers. However, in my result, I still have multiple variables stored in each column.&lt;/p&gt;&lt;p&gt;For the purposes of our project, it was enough to get the functionality working, but keeping in mind if I wanted to deal with a more dynamic set of data, it might be worth thinking along tidy data principles.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/tidying.gif" class="kg-image"&gt;&lt;/figure&gt;
&lt;/div&gt;</content:encoded></item><item><title>WWJD: Strategies for Debugging</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;When it comes to the sometimes extreme complexity of relationships created by object-oriented programming, we all know that heart-sinking feeling when one little change causes a lot of things to break. Or, when looking for the culprit behind the error in your code feels like a unicode version of 'Where's&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/strategies-for-debugging-2/</link><guid isPermaLink="false">5b5725f57e37617dca1bb3c4</guid><dc:creator>Ritz Wu</dc:creator><pubDate>Tue, 24 Jul 2018 13:13:40 GMT</pubDate><content:encoded>&lt;div class="kg-post"&gt;
&lt;p&gt;When it comes to the sometimes extreme complexity of relationships created by object-oriented programming, we all know that heart-sinking feeling when one little change causes a lot of things to break. Or, when looking for the culprit behind the error in your code feels like a unicode version of 'Where's Waldo.'&lt;/p&gt;
&lt;p&gt;&lt;img src="https://frinkiac.com/video/S11E06/C2m6E51uBVuXMwZSr9EbFCLTEmE=.gif" alt="via Giphy"&gt;&lt;/p&gt;
&lt;p&gt;At times like this, one of the very best things you can do is to stop looking at the big picture, enter into what you've created, and troubleshoot for yourself where things have gone wrong, line by line of code.&lt;/p&gt;
&lt;p&gt;While I bear no religious affliation, for the intents and purposes of this metaphor, let's take ourselves into one of the most ubiquitous stories of modern civilization and imagine, if you will, that you're the New Testament Judeo-Christian God.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://media.giphy.com/media/hYAvfvuj8xKxO/giphy.gif" alt="via Disney Blogs"&gt;&lt;/p&gt;
&lt;p&gt;You've created a fabulous creature called a human, they love you (mostly) and you love them (mostly). Everything is going well (kind of).&lt;/p&gt;
&lt;p&gt;But sometimes, things get complicated between the humans you've created, the humans they've procreated, and all of that ensuing sin.&lt;/p&gt;
&lt;p&gt;Unlike Old Testament Judeo-Christian God, you know the most direct way to solve this problem is to get a little hands-on. But it's the New Testament now. It's been nice trying to figure out the situation from a safe distance. But sometimes, when you don't put yourself into the shoes of your object, you can't see what's going on.&lt;/p&gt;
&lt;p&gt;To do so, we must, stop everything at one line, find a way to infiltrate into the world we've created, and figure that #$%&amp;amp; out from the bottom-up. Enter Pry, aka Jesus.&lt;/p&gt;
&lt;p&gt;As New Testament God's alternative to destroying everything (DELETE ALL AND START AGAIN), he's decided to demonstrate emotional growth, by tasking Jesus with coming to Earth, living amongst the humans and debugging their greatest moral problems.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/EsTxfLF.gif" alt="Courtesy of A Science Enthusiast"&gt;&lt;/p&gt;
&lt;p&gt;Here's where this tenuous religious metaphor ends, and where I begin presenting a few strategies for debugging with tools like Pry (Jesus) that I've used and researched, that may help you to slowly back away from the wall you've been banging your head against, and expedite your journey to testing success.&lt;/p&gt;
&lt;h1 id="step1readtheerror"&gt;Step 1: Read the Error&lt;/h1&gt;
&lt;p&gt;BEFORE YOU TRY ANYTHING -  First and foremost, always read the error. I mean, really, read it. Don't just skim over it, no matter how tired you are. Go to that line of code that it's pointing you to, and see if the problem jumps out at you. For example, if it is an immediately apparent syntax error or argument error, it might be very obvious right in that line of code.&lt;/p&gt;
&lt;p&gt;But what about when it's not so obvious? We know that sometimes some line of code somewhere else, which is connected to the line of code generating the error, is the cause of our problems.&lt;/p&gt;
&lt;p&gt;There are two common errors that one might encounter that cause a method/program not to work.&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;The first is when it is clear that the program is able to find all of its parts and run successfully, but what you run is  returning the wrong thing. In this case, the problem is within your code. &lt;strong&gt;Proceed to Step 2.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second is connectivity (whether the file in question is set up  correctly, and linked correctly to its components). You might come across an error like this if you get a missing method or missing class error. In cases like this, &lt;strong&gt;proceed to step 3.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="step2breakitapart"&gt;Step 2: Break it Apart&lt;/h1&gt;
&lt;p&gt;When we know what step in your code isn't working, it's best to use a debugger tool such as Pry. Every language has it's own Pry, maybe called something different.&lt;/p&gt;
&lt;p&gt;Essentially we use debuggers to examine program states. It stops your code at a given point so we can check two main things - what the variables are, and whether the method calls in a call stack (series of method calls) run. We use it to investigate each part of our code, to locate where the error might be coming from.&lt;/p&gt;
&lt;p&gt;Like Jesus, you have essentially descended from the heavens into your code to try to figure out what's going on.&lt;/p&gt;
&lt;p&gt;Use Pry to break apart the line of code that you are struggling with, and test each part of it.&lt;/p&gt;
&lt;p&gt;For example, given this block of code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;num_followers = 5000;

def JesusMagic(num_of_sth)
    num_of_sth * 1000
end

def MagicMultiply(loaves_of_bread, fish)
    portion_bread = loaves_of_bread / num_followers
    portion_fish = fish / num_followers
    more_bread = JesusMagic(portion_bread)
    more_fish = JesusMagic(portion_fish)
    binding.pry //I'm here guys! Love, Jesus
    puts &amp;quot;Each of Jesus's #{num_followers} followers actually ate #{more_bread} bread and #{more_fish} fish, which he magicked out of #{loaves_of_bread} loaves of bread and #{fish} fish. Go Jesus!&amp;quot;
end

MagicMultiply(5, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pry will stop the method right after we define more_fish, and before we return our final string. At this point we:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Test the variables.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;img src="http://www.rosiejensing.com/wp-content/uploads/2015/09/jesuspic.jpg" style="width: 200px"&gt;&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;num_followers&lt;/code&gt;?&lt;br&gt;
What is &lt;code&gt;loaves_of_bread&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Is it what we think it should be?&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;em&gt;Oops! The code above is returning 0 for &lt;code&gt;num_followers&lt;/code&gt;. That means it's probably not reading that variable. If we try putting it inside the method, it returns 5000, correctly.&lt;/em&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Test the methods.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;img src="https://media1.tenor.com/images/007f39176a63cc71b211579096a4e542/tenor.gif?itemid=9496003" style="width: 100px"&gt;&lt;/p&gt;
&lt;p&gt;Given a random number, like 2...&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;JesusMagic(2)&lt;/code&gt;?&lt;br&gt;
Is it what we think it should be?&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;portion_bread&lt;/code&gt; at this stop point? Is it indeed 5 divided by 5000? Check it on a calculator.&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;portion_fish&lt;/code&gt; at this stop point? Is it indeed 3 divided by 5000?&lt;br&gt;
Check it on a calculator.&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;em&gt;Hot damn! Testing &lt;code&gt;portion_bread&lt;/code&gt; and &lt;code&gt;portion_fish&lt;/code&gt; we find that the operation returns 0, and after some googling realize that when we are expecting a number with a decimal to be returned, the number that's being divided needs to be a float (end with .0).&lt;/em&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Test the variables and method in combination.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;more_bread&lt;/code&gt;? Does it multiply &lt;code&gt;portion_bread&lt;/code&gt; by 100?&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;more_fish&lt;/code&gt;? Does it multiply &lt;code&gt;portion_fish&lt;/code&gt; by 100?&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;em&gt;This seems fine.&lt;/em&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Using pry, you can also google methods you haven't tried before and try using them as well in an attempt to return the right thing.&lt;/p&gt;
&lt;p&gt;What if we typed in &lt;code&gt;JesusMagic(loaves_of_bread / num_followers)&lt;/code&gt;? Does that still work? Would that be a better alternative?&lt;/p&gt;
&lt;p&gt;Progressively test in bigger and bigger chunks, until you're testing for the whole method/call.&lt;/p&gt;
&lt;p&gt;Where you're finding that something is equal to something it's not supposed to be, or generating another error, you're getting closer to the root of the problem.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So in the example above, factoring in our corrections we get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def JesusMagic(num_of_sth)
    num_of_sth * 1000
end

def MagicMultiply(loaves_of_bread, fish)
	num_followers = 5000
    portion_bread = loaves_of_bread.to_f / num_followers
    portion_fish = fish.to_f / num_followers
    more_bread = JesusMagic(portion_bread)
    more_fish = JesusMagic(portion_fish)
    puts &amp;quot;Each of Jesus's #{num_followers} followers actually ate #{more_bread} bread and #{more_fish} fish, which he magicked out of #{loaves_of_bread} loaves of bread and #{fish} fish. Go Jesus!&amp;quot;
end

MagicMultiply(5, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;mark&gt;Each of Jesus's 5000 followers actually ate 1.0 bread and 0.6 fish, which he magicked out of 5 loaves of bread and 3 fish. Go Jesus!&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;Much better.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="step3checkyourbases"&gt;Step 3: Check your Bases&lt;/h1&gt;
&lt;p&gt;If the error is coming from missing components, methods, classes, or instances, the first thing to do is to check your bases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Examine your assumptions:&lt;/strong&gt; Are you working in the right place? Is the code you're writing meant to be there? Check other files or look online for clues to see if other people are putting that block of code in the same place.&lt;br&gt;
2.&lt;strong&gt;Check your access:&lt;/strong&gt; Can you access the variables and methods you're trying to use? If variables - Are they inside or outside of the method? Do you have read/write access where you're attempting to call them? If methods - are they defined correctly as class or instance? Are you putting in the right amount or format of arguments?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spelling and Syntax:&lt;/strong&gt; Are the syntax and spelling of your methods within your method definitions correct? If the error reports that something is missing, are all of your necessary  files correctly named and linked?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment:&lt;/strong&gt; Is the order of linked files correct? For example, are you attempting to run methods or classes which are linked in your environment after the one you've invoked it in? Are you missing gems?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If just thinking through these things doesn't yield any answers, you can try the following techniques.&lt;/p&gt;
&lt;h3 id="moregeneraltechniquestolocatetheproblem"&gt;More General Techniques to Locate the Problem&lt;/h3&gt;
&lt;h4 id="divideandconquer"&gt;Divide and Conquer&lt;/h4&gt;
&lt;p&gt;One strategy that might be helpful with this type of error is to divide and conquer. You can comment out different chunks of your code to try to narrow down where the problem is coming from.&lt;/p&gt;
&lt;p&gt;This is a strategy also known as the wolf fence algorithm.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Edward Gauss described this simple but very useful and now famous algorithm in a 1982 article for communications of the ACM as follows: &amp;quot;There's one wolf in Alaska; how do you find it? First build a fence down the middle of the state, wait for the wolf to howl, determine which side of the fence it is on. Repeat process on that side only, until you get to the point where you can see the wolf.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be particularly useful for situations when you aren't sure which part of your code is causing something to be missing, or which call is causing the problem. This can be an effective alternative to firing up your debugger, particularly if you're not sure yet what exactly to debug.&lt;/p&gt;
&lt;h4 id="printdebugging"&gt;Print Debugging&lt;/h4&gt;
&lt;p&gt;Another technique that can be used is to make full use of your console, and have your code report back to you at every point something has been executed. This means to use 'puts' or 'console.log()' or whatever equivalent in your language will put out a message in your terminal as a little flag for yourself to say, &amp;quot;This step has been done.&amp;quot;&lt;/p&gt;
&lt;p&gt;In the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def saintedNames
disciples = [&amp;quot;Philip&amp;quot;, &amp;quot;Andrew&amp;quot;, &amp;quot;Thomas&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;James&amp;quot;, &amp;quot;Judas&amp;quot;, &amp;quot;Matthew&amp;quot;, &amp;quot;Simon&amp;quot;, &amp;quot;Simon&amp;quot;, &amp;quot;Thaddeus&amp;quot;, &amp;quot;Bartholomew&amp;quot;, &amp;quot;James&amp;quot;]
    judas = disciples.find{|disciple| disciple == &amp;quot;Judas&amp;quot;}
    puts &amp;quot;we found #{judas}&amp;quot;
    disciples.delete(judas)
    puts &amp;quot;judas was deleted, now there are #{disciples.count} disciples&amp;quot;
    disciples.uniq
    puts &amp;quot;eliminated all repeated names, now disciples = #{disciples}&amp;quot;
    disciples.map {|disciple| &amp;quot;St. #{disciple}&amp;quot;}
end

saintedNames
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What you should get is a series of flags indicating our flow of execution:&lt;br&gt;
&lt;code&gt;&amp;quot;we found 'Judas'&amp;quot;&lt;/code&gt; &amp;lt;- Flag that this step was completed successfully&lt;br&gt;
&lt;code&gt;&amp;quot;judas was deleted, now there are 11 disciples&amp;quot;&lt;/code&gt; &amp;lt;-  Flag that this step was completed successfully.&lt;br&gt;
&lt;code&gt;&amp;quot;eliminated all repeated names, now disciples = [&amp;quot;Philip&amp;quot;, &amp;quot;Andrew&amp;quot;, &amp;quot;Thomas&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;James&amp;quot;, &amp;quot;Matthew&amp;quot;, &amp;quot;Simon&amp;quot;, &amp;quot;Thaddeus&amp;quot;, &amp;quot;Bartholomew&amp;quot;]&amp;quot;&lt;/code&gt; &amp;lt;-  Flag that this step was completed successfully.&lt;br&gt;
&lt;code&gt;[&amp;quot;St. Philip&amp;quot;, &amp;quot;St. Andrew&amp;quot;, &amp;quot;St. Thomas&amp;quot;, &amp;quot;St. John&amp;quot;, &amp;quot;St. James&amp;quot;, &amp;quot;St. Matthew&amp;quot;, &amp;quot;St. Simon&amp;quot;, &amp;quot;St. Thaddeus&amp;quot;, &amp;quot;St. Bartholomew&amp;quot;]&lt;/code&gt; &amp;lt;- Your successful code.&lt;/p&gt;
&lt;h1 id="step4readthetestspecsanduseprytosimulatescenarios"&gt;Step 4 - Read the test specs, and use Pry to simulate scenarios&lt;/h1&gt;
&lt;p&gt;One thing that will always help your code is to test it on a variety of example to see what it does, and you can do this within Pry. It gives you a sort of environment you can play around in, to see what you can get. And it's much faster to test things out in Pry than to run your test suite over and over again. You can even test examples in your test suite in Pry!&lt;/p&gt;
&lt;p&gt;For example, given our test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe 'Angel' do
  before do
    `@michael = Angel.new(name: &amp;quot;Michael&amp;quot;)
  end
 it 'has a name' do
    expect(Angel.find_by(name: &amp;quot;Michael&amp;quot;)).to eq(@michael)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And our code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Angel
    @@all = []
    attr_accessor :name
    def initialize(name:name)
        @name = name
    end
    def self.all
        @@all
    end
    def self.find_by(name)
        Angel.all.find{|angel| angel.name = name}
    end
 end
 binding.pry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within binding.pry we can directly run:&lt;br&gt;
&lt;code&gt;Angel.new(name: &amp;quot;Michael&amp;quot;)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Angel.find_by(&amp;quot;Michael&amp;quot;)&lt;/code&gt;&lt;br&gt;
And helpful errors will appear directly within the console, if there are any. We can then adjust our code accordingly. Passing this will ensure that we pass our test. So much faster than running the entire suite of tests every time we try something new!&lt;/p&gt;
&lt;p&gt;You can also use this space to challenge your code and see the limits of what's possible. For example, if you run &lt;code&gt;Angel.new(name: &amp;quot;&amp;quot;)&lt;/code&gt; will it pass? If you run &lt;code&gt;Angel.new(name: 0)&lt;/code&gt; Should you try to prevent against these cases?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This article is by no means comprehensive in terms of what you can do to debug but I hope it is helpful.&lt;/p&gt;
&lt;h1 id="links"&gt;Links&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.rubyguides.com/2015/07/ruby-debugging/"&gt;Ruby Guide to Debugging&lt;/a&gt;&lt;br&gt;
Specifically dealing with Ruby error messages, how to read them, and other tools Ruby provides to debug.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/debugmethods.html"&gt;Techniques for Debugging&lt;/a&gt;&lt;br&gt;
General and concise recap of different debugging techniques.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zv_aOlH8S_o"&gt;Debugging Javascript in Google Chrome - Gordon Zhu&lt;/a&gt;&lt;br&gt;
This is one of the best videos I've ever seen that teaches about debugging with a tool like Pry, but for Javascript. It specifically focuses on using it to debug iterations - where by putting the debugger in the middle of your method definition, you can literally check the changes to your variables as of every iteration call. For example, in a 'for each' situation you can see how  variables change every time the next item is called.&lt;/p&gt;
&lt;hr&gt;
&lt;iframe src="https://giphy.com/embed/9oIONgUXLcm5p6CMc3" width="480" height="270" frameborder="0" class="giphy-embed" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="https://giphy.com/gifs/tvonetv-love-happy-9oIONgUXLcm5p6CMc3"&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;</content:encoded></item><item><title>Object-oriented programming, Lee Bul and the awareness of SELF</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;I went to the Hayward Gallery this week, where they were showing a retrospective of Korean artist Lee Bul. The work in the last room, which felt like the grand finale, was called 'Via Negativa'. It was a sculpture which consisted of a maze of fragmented mirrors leading to a&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/object-oriented-programming-self/</link><guid isPermaLink="false">5b55c09549b06d4dcab52644</guid><dc:creator>Ritz Wu</dc:creator><pubDate>Mon, 23 Jul 2018 11:49:45 GMT</pubDate><content:encoded>&lt;div class="kg-post"&gt;
&lt;p&gt;I went to the Hayward Gallery this week, where they were showing a retrospective of Korean artist Lee Bul. The work in the last room, which felt like the grand finale, was called 'Via Negativa'. It was a sculpture which consisted of a maze of fragmented mirrors leading to a central room with an infinity mirror chamber, surrounded by lights.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2018/07/via-negativa.jpg" alt="Via Negativa, Lee Bul"&gt;&lt;sup class="footnote-ref"&gt;&lt;a href="#fn1" id="fnref1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;People really did like taking selfies in this work. The outside of the structure is covered by pages of Julian Jaynes' 'The origin of consciousness', printed in reverse. A quote from this book shows some of Lee Bul's thinking behind this structure, which disorients the viewer through continuously shifting reflections of their own image as they walk through.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Originally, humans thought that self-consciousness was either their own thought, or the voice of God. As people’s lives began to get more complicated, the two territories have become connected and, while going back and forth between the two self-consciousnesses, we look and review [the ways in which] our selves come about.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While looking at this work, I started thinking about the idea of self awareness and the self as an object.&lt;/p&gt;
&lt;p&gt;In computer programming, in various languages, this, self, and Me are keywords used to refer to the object, class, or other entity of which the code is part. It is a defining concept within object-oriented programming. In human psychology, self-awareness, which emerges at around 18 months of age, also is the point at which we are able to evaluate ourselves in relation to others.&lt;/p&gt;
&lt;p&gt;If we think about it - this habit of thinking of ourselves as objects, and others as objects, and all of our relationships as objects, as we do when we are reflecting in a self-aware way, we might easily understand why this approach was invented, and how it is in a certain way, intuitive for humans to use.&lt;/p&gt;
&lt;p&gt;Object-oriented programming, is known a paradigm in which all computations are carried out using objects. Classes, objects, methods are all ways of defining objects, creating them, and relating them to each other.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2018/07/oop-objects.png" alt="oop-objects"&gt;&lt;sup class="footnote-ref"&gt;&lt;a href="#fn2" id="fnref2"&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Correspondingly, our ability to understand ourselves and the natural world by looking at processes as objects (think of any word that ends in '-ment' or '-tion', turning a verb into a noun) lends itself well to the thinking behind OO.  Indeed, the inventor of Object Oriented Programming, Alan Kay, took inspiration from biology when he was developing the language Smalltalk in 1980. One of his inspirations was the biological cell - and how it as a self-contained unit communicated with other cells via chemical messages.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2018/07/cell_images.png" alt="cell_images"&gt; &lt;sup class="footnote-ref"&gt;&lt;a href="#fn3" id="fnref3"&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;It occurred to me that object-oriented-ness was not only a computer science methodology, but a way of thinking. And perhaps, learning to see things more explicitly in terms of objects would greatly help with the task of translating them to code in an object-oriented language.&lt;/p&gt;
&lt;p&gt;I'll give an example! For example, a &lt;a href="https://www.semanticscholar.org/paper/Bodily-self-consciousness%2C-and-the-primacy-of-self-Elk-Blanke/53785ffd81fe6a4445a045324ada9b8099833d05"&gt;certain study about bodily self consciousness&lt;/a&gt; looks into the way that we might be aware of objects through other people's awareness of them.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2018/07/awareness.png" alt="awareness"&gt; &lt;sup class="footnote-ref"&gt;&lt;a href="#fn4" id="fnref4"&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Though this might seem to be a quite subtle and abstract phenomenon, we might be able to apply this to the hard logic of the computer by thinking of this process through OO programming. What if we were to consider Abel and objects that he is aware of through Bill as a has-many-through relationship?&lt;/p&gt;
&lt;p&gt;What other possibilities exist in translating concepts in the natural world to code? Food for thought.&lt;/p&gt;
&lt;hr class="footnotes-sep"&gt;
&lt;section class="footnotes"&gt;
&lt;ol class="footnotes-list"&gt;
&lt;li id="fn1" class="footnote-item"&gt;&lt;p&gt;&lt;a href="https://creators.vice.com/en_us/article/ez5nxa/lee-buls-labyrinth-of-infinity-mirrors-via-negativa-ii-video"&gt;https://creators.vice.com/en_us/article/ez5nxa/lee-buls-labyrinth-of-infinity-mirrors-via-negativa-ii-video&lt;/a&gt; &lt;a href="#fnref1" class="footnote-backref"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn2" class="footnote-item"&gt;&lt;p&gt;&lt;a href="https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp3_OOP.html"&gt;https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp3_OOP.html&lt;/a&gt; &lt;a href="#fnref2" class="footnote-backref"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn3" class="footnote-item"&gt;&lt;p&gt;&lt;a href="https://www.khanacademy.org/science/biology/cell-signaling/mechanisms-of-cell-signaling/a/introduction-to-cell-signaling"&gt;https://www.khanacademy.org/science/biology/cell-signaling/mechanisms-of-cell-signaling/a/introduction-to-cell-signaling&lt;/a&gt; &lt;a href="#fnref3" class="footnote-backref"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn4" class="footnote-item"&gt;&lt;p&gt;&lt;a href="https://ai2-s2-public.s3.amazonaws.com/figures/2017-08-08/53785ffd81fe6a4445a045324ada9b8099833d05/5-Figure1-1.png"&gt;https://ai2-s2-public.s3.amazonaws.com/figures/2017-08-08/53785ffd81fe6a4445a045324ada9b8099833d05/5-Figure1-1.png&lt;/a&gt; &lt;a href="#fnref4" class="footnote-backref"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

&lt;/div&gt;</content:encoded></item></channel></rss>